steps:
  # Run Unit Tests
  - name: 'gcr.io/cloud-builders/mvn'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd backend
        chmod +x ./mvnw
        ./mvnw clean test

  # Run Frontend Tests
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd frontend
        npm ci
        npm run build

  # Build Backend Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/goal-tracker-backend:$BRANCH_NAME-$SHORT_SHA', './backend']

  # Build Frontend Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/goal-tracker-frontend:$BRANCH_NAME-$SHORT_SHA', './frontend']

  # Push Backend Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/goal-tracker-backend:$BRANCH_NAME-$SHORT_SHA']

  # Push Frontend Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/goal-tracker-frontend:$BRANCH_NAME-$SHORT_SHA']

  # Deploy to Staging (for non-main branches)
  - name: 'gcr.io/cloud-builders/gke-deploy'
    args:
      - 'run'
      - '--filename=k8s/staging/'
      - '--image=goal-tracker-backend=gcr.io/$PROJECT_ID/goal-tracker-backend:$BRANCH_NAME-$SHORT_SHA'
      - '--image=goal-tracker-frontend=gcr.io/$PROJECT_ID/goal-tracker-frontend:$BRANCH_NAME-$SHORT_SHA'
      - '--location=us-central1-a'
      - '--cluster=goal-tracker-staging'
    condition: '$BRANCH_NAME != "main"'

  # Deploy to Production (for main branch)
  - name: 'gcr.io/cloud-builders/gke-deploy'
    args:
      - 'run'
      - '--filename=k8s/production/'
      - '--image=goal-tracker-backend=gcr.io/$PROJECT_ID/goal-tracker-backend:$BRANCH_NAME-$SHORT_SHA'
      - '--image=goal-tracker-frontend=gcr.io/$PROJECT_ID/goal-tracker-frontend:$BRANCH_NAME-$SHORT_SHA'
      - '--location=us-central1-a'
      - '--cluster=goal-tracker-production'
    condition: '$BRANCH_NAME == "main"'

  # Run E2E Tests (after deployment)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Wait for deployment to be ready
        sleep 60
        # Run E2E tests against deployed environment
        cd e2e-tests
        npm ci
        export BASE_URL="http://34.60.163.229:80"
        export API_URL="http://34.118.225.89:80"
        npm run test:e2e

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

substitutions:
  _ENVIRONMENT: 'staging'